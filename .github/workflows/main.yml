# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_iOS: # jobに名前をつけられる

    name: Build for iOS # GitHubに表示されるジョブの名前
    runs-on: macos-latest # ジョブを実行するマシーンの種類

    steps: #一連のタスク

      # チェックアウト
      - name: Checks-out my repository # step に名前をつけられる なくてもいい
        uses: actions/checkout@v2
      
      # Xcode 13.2.1 を使う
      - name: Select Xcode version 
        run: sudo xcode-select -s '/Applications/Xcode_13.2.1.app/Contents/Developer'

      # バージョン確認
      - name: Show Xcode version
        run: xcodebuild -version

#      # Bundleインストール
#      - name: Bundle Install
#        run: bundle install

      - name: setup cache      
        uses: actions/cache@v1
        with: 
          path: /Users/runner/hostedtoolcache/flutter
          key: ${{runner.OS}}-flutter-install-cache

      - name: install flutter      
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '1.20.2'
          channel: 'stable'
          
      - name: flutter dependencies install
        run: flutter pub get
      
      # 証明書の生成
      - name: Import Provisioning Profile
        run: | # 複数行の run を書きたい場合はこうする 以下、Provisioning Profilesを置くべきディレクトリにデコードしている
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n ${{ secrets.PROVISIONING_PROFILE }} | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/9373ec01-333c-40a2-9fd1-03fa0509e0ac.mobileprovision

      # 署名をする
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1 # 外部パッケージを使っている
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}
      
      - run: flutter build ios
      
      # 頑張ってipaを出力します
      - name: XCode Build Archive
        uses: yukiarrr/ios-build-action@v1.1.1
        with:
          project-path: sample App.xcodeproj
          p12-base64: ${{ secrets.CERTIFICATES_P12 }}
          certificate-password: ${{ secrets.CERTIFICATE_PASSWORD }}
          mobileprovision-base64: ${{ secrets.PROVISIONING_PROFILE }}
          code-signing-identity: ${{ secrets.CODE_SIGNING_IDENTITY }}
          team-id: ${{ secrets.TEAM_ID }}
          output-path: app-release.ipa
          export-method: development
      
#      - name: Upload a new build to App Store Connect
#        env:
#          KEYCHAIN_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
#          CERT_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
#        run: bundle exec fastlane build
      
#      - name: Build # シミュレーター向けにビルド
#        run: xcodebuild -sdk iphonesimulator -configuration Debug build

#      # Flutter のインストール
#      - name: Install Flutter
#        run: git clone https://github.com/flutter/flutter.git # ターミナルでこれが実行されるイメージ
#
#      # PATH を通す
#      - name: Add path
#        run: echo "$(pwd)/flutter/bin" >> $GITHUB_PATH # GITHUB_PATH にどんどんぶちこめばいいらしい
#
#      # パッケージのダウンロード
#      - name: cd
#        run: ls -la flutter
#
#      # パッケージのダウンロード
#      - name: Download Flutter packages
#        run: flutter pub get
#
#      # 証明書の生成
#      - name: Import Provisioning Profile
#        run: | # 複数行の run を書きたい場合はこうする 以下、Provisioning Profilesを置くべきディレクトリにデコードしている
#          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#          echo -n ${{ secrets.PROVISIONING_PROFILE }} | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/9373ec01-333c-40a2-9fd1-03fa0509e0ac.mobileprovision
#
#      # 署名をする
#      - name: Import Code-Signing Certificates
#        uses: Apple-Actions/import-codesign-certs@v1 # 外部パッケージを使っている
#        with:
#          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
#          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}
#
#      # ipa ファイルの出力
#      - name: Create ipa file
#        # GITHUB_RUN_NUMBER をビルドナンバーに指定することで被りがないようにしている。
#        run: flutter build ipa --export-options-plist=ExportOptions.plist #--build-number ${GITHUB_RUN_NUMBER}

